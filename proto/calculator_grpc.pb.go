// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributedCalculatorClient is the client API for DistributedCalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedCalculatorClient interface {
	Calculation(ctx context.Context, in *SimpleExpression, opts ...grpc.CallOption) (*ValueSimpleExpression, error)
	Monitoring(ctx context.Context, in *RequestServer, opts ...grpc.CallOption) (*MonitoringServer, error)
}

type distributedCalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedCalculatorClient(cc grpc.ClientConnInterface) DistributedCalculatorClient {
	return &distributedCalculatorClient{cc}
}

func (c *distributedCalculatorClient) Calculation(ctx context.Context, in *SimpleExpression, opts ...grpc.CallOption) (*ValueSimpleExpression, error) {
	out := new(ValueSimpleExpression)
	err := c.cc.Invoke(ctx, "/calculator.Distributed_calculator/Calculation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedCalculatorClient) Monitoring(ctx context.Context, in *RequestServer, opts ...grpc.CallOption) (*MonitoringServer, error) {
	out := new(MonitoringServer)
	err := c.cc.Invoke(ctx, "/calculator.Distributed_calculator/Monitoring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedCalculatorServer is the server API for DistributedCalculator service.
// All implementations must embed UnimplementedDistributedCalculatorServer
// for forward compatibility
type DistributedCalculatorServer interface {
	Calculation(context.Context, *SimpleExpression) (*ValueSimpleExpression, error)
	Monitoring(context.Context, *RequestServer) (*MonitoringServer, error)
	mustEmbedUnimplementedDistributedCalculatorServer()
}

// UnimplementedDistributedCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedDistributedCalculatorServer struct {
}

func (UnimplementedDistributedCalculatorServer) Calculation(context.Context, *SimpleExpression) (*ValueSimpleExpression, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculation not implemented")
}
func (UnimplementedDistributedCalculatorServer) Monitoring(context.Context, *RequestServer) (*MonitoringServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Monitoring not implemented")
}
func (UnimplementedDistributedCalculatorServer) mustEmbedUnimplementedDistributedCalculatorServer() {}

// UnsafeDistributedCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedCalculatorServer will
// result in compilation errors.
type UnsafeDistributedCalculatorServer interface {
	mustEmbedUnimplementedDistributedCalculatorServer()
}

func RegisterDistributedCalculatorServer(s grpc.ServiceRegistrar, srv DistributedCalculatorServer) {
	s.RegisterService(&DistributedCalculator_ServiceDesc, srv)
}

func _DistributedCalculator_Calculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleExpression)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedCalculatorServer).Calculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Distributed_calculator/Calculation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedCalculatorServer).Calculation(ctx, req.(*SimpleExpression))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedCalculator_Monitoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedCalculatorServer).Monitoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Distributed_calculator/Monitoring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedCalculatorServer).Monitoring(ctx, req.(*RequestServer))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedCalculator_ServiceDesc is the grpc.ServiceDesc for DistributedCalculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedCalculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Distributed_calculator",
	HandlerType: (*DistributedCalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculation",
			Handler:    _DistributedCalculator_Calculation_Handler,
		},
		{
			MethodName: "Monitoring",
			Handler:    _DistributedCalculator_Monitoring_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calculator.proto",
}

// AuthenticationServerClient is the client API for AuthenticationServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServerClient interface {
	Authorization(ctx context.Context, in *Form, opts ...grpc.CallOption) (*AuthorizationStatus, error)
	Authentication(ctx context.Context, in *Form, opts ...grpc.CallOption) (*GiveToken, error)
}

type authenticationServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServerClient(cc grpc.ClientConnInterface) AuthenticationServerClient {
	return &authenticationServerClient{cc}
}

func (c *authenticationServerClient) Authorization(ctx context.Context, in *Form, opts ...grpc.CallOption) (*AuthorizationStatus, error) {
	out := new(AuthorizationStatus)
	err := c.cc.Invoke(ctx, "/calculator.Authentication_server/Authorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServerClient) Authentication(ctx context.Context, in *Form, opts ...grpc.CallOption) (*GiveToken, error) {
	out := new(GiveToken)
	err := c.cc.Invoke(ctx, "/calculator.Authentication_server/Authentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServerServer is the server API for AuthenticationServer service.
// All implementations must embed UnimplementedAuthenticationServerServer
// for forward compatibility
type AuthenticationServerServer interface {
	Authorization(context.Context, *Form) (*AuthorizationStatus, error)
	Authentication(context.Context, *Form) (*GiveToken, error)
	mustEmbedUnimplementedAuthenticationServerServer()
}

// UnimplementedAuthenticationServerServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServerServer struct {
}

func (UnimplementedAuthenticationServerServer) Authorization(context.Context, *Form) (*AuthorizationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorization not implemented")
}
func (UnimplementedAuthenticationServerServer) Authentication(context.Context, *Form) (*GiveToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authentication not implemented")
}
func (UnimplementedAuthenticationServerServer) mustEmbedUnimplementedAuthenticationServerServer() {}

// UnsafeAuthenticationServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServerServer will
// result in compilation errors.
type UnsafeAuthenticationServerServer interface {
	mustEmbedUnimplementedAuthenticationServerServer()
}

func RegisterAuthenticationServerServer(s grpc.ServiceRegistrar, srv AuthenticationServerServer) {
	s.RegisterService(&AuthenticationServer_ServiceDesc, srv)
}

func _AuthenticationServer_Authorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Form)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServerServer).Authorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Authentication_server/Authorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServerServer).Authorization(ctx, req.(*Form))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationServer_Authentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Form)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServerServer).Authentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Authentication_server/Authentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServerServer).Authentication(ctx, req.(*Form))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationServer_ServiceDesc is the grpc.ServiceDesc for AuthenticationServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Authentication_server",
	HandlerType: (*AuthenticationServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorization",
			Handler:    _AuthenticationServer_Authorization_Handler,
		},
		{
			MethodName: "Authentication",
			Handler:    _AuthenticationServer_Authentication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calculator.proto",
}
